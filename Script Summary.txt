#################Using DADA2 to generate ASV in R##########

library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")

path <- "D:/Desktop/sequences"  ## CHANGE ME to the directory containing the fastq files.
list.files(path)

fnFs <- sort(list.files(path, pattern = "_1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_2.fastq.gz", full.names = TRUE))

FWD <- "GGGCAATCCTGAGCCAA"  ## CHANGE ME to your forward primer sequence  trnl
REV <- "CCATTGAGTCTCTGCACCTATC"  ## CHANGE ME...

FWD <- "GGAAGTAAAGTAAAAGTCGTAAAGG"  ## CHANGE ME to your forward primer sequence  
REV <- "GCTGCGTTCTTCATCGATGC"  ## CHANGE ME...



allOrients <- function(primer) {
  # Create all orientations of the input sequence
  require(Biostrings)
  dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
  orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna), 
               RevComp = reverseComplement(dna))
  return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients

fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)

primerHits <- function(primer, fn) {
  # Counts number of reads in which the primer is found
  nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
  return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]), 
      FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]), 
      REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]), 
      REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))

cutadapt <- "D:/Desktop/cutadapt" # CHANGE ME to the cutadapt path on your machine
system2(cutadapt, args = "--version") # Run shell commands from R


path.cut <- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))

FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC) 
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC) 
# Run Cutadapt
for(i in seq_along(fnFs)) {
  system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
                             "-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
                             fnFs.filtN[i], fnRs.filtN[i])) # input files
}

rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.cut[[1]]), 
      FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.cut[[1]]), 
      REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.cut[[1]]), 
      REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.cut[[1]]))

# Forward and reverse fastq filenames have the format:
cutFs <- sort(list.files(path.cut, pattern = "_1.fastq.gz", full.names = TRUE))
cutRs <- sort(list.files(path.cut, pattern = "_2.fastq.gz", full.names = TRUE))

# Extract sample names, assuming filenames have format:
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][1]
sample.names <- unname(sapply(cutFs, get.sample.name))
head(sample.names)

plotQualityProfile(cutFs[1:2])
plotQualityProfile(cutRs[1:2])

filtFs <- file.path(path.cut, "filtered", basename(cutFs))
filtRs <- file.path(path.cut, "filtered", basename(cutRs))
out <- filterAndTrim(cutFs, filtFs, cutRs, filtRs, maxN = 0, maxEE = c(2, 2), 
                     truncQ = 2, minLen = 50, rm.phix = TRUE, compress = TRUE, multithread = F)  # on windows, set multithread = FALSE
head(out)

errF <- learnErrors(filtFs, multithread = TRUE)
errR <- learnErrors(filtRs, multithread = TRUE)

plotErrors(errF, nominalQ = TRUE)

derepFs <- derepFastq(filtFs, verbose = TRUE)
derepRs <- derepFastq(filtRs, verbose = TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names

dadaFs <- dada(derepFs, err = errF, multithread = TRUE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE)

mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)


seqtab <- makeSequenceTable(mergers)
dim(seqtab)

seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
table(nchar(getSequences(seqtab.nochim)))

getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, 
                                                                       getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace
# sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", 
                     "nonchim")
rownames(track) <- sample.names
head(track)

####The following steps are optional###################

####Species annotation 1: For the Unity database, the Qiime official website recommends using the dev version, and the training set does not undergo primer reduction
unite.ref <- "sh_general_release_dynamic_29.11.2022_dev.fasta"  # CHANGE ME to location on your machine
taxa <- assignTaxonomy(seqtab.nochim, unite.ref, multithread = TRUE, tryRC = TRUE)

seqtab.nochim <- read.delim("clipboard",header = T,row.names = 1)
trnl.ref <- "ref_plant_trnl.fasta"  # CHANGE ME to location on your machine
taxa <- assignTaxonomy(seqtab.nochim, trnl.ref, multithread = TRUE, tryRC = TRUE)
write.csv(taxa,"r分类_40.csv")

###Species Annotation 2! Faster and more accurate
library(DECIPHER)
packageVersion("DECIPHER")

dna <- DNAStringSet(getSequences(seqtab.nochim)) # Create a DNAStringSet from the ASVs
load(paste0(path, "/UNITE_v2021_May2021.RData"))
ids <- IdTaxa(dna, trainingSet, strand="top", processors=NULL, verbose=FALSE) # use all processors

ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species") # ranks of interest
taxid <- t(sapply(ids, function(x) {
  m <- match(ranks, x$rank)
  taxa <- x$taxon[m]
  taxa[startsWith(taxa, "unclassified_")] <- NA
  taxa
}))
colnames(taxid) <- ranks
rownames(taxid) <- getSequences(seqtab.nochim)





setwd("D:/Desktop/")
write.table(seqtab.nochim,"seqtab.nochim.txt",quote = F,sep = "\t")



#remotes::install_github("fkeck/refdb")
###数据库操作####txid35493为链形植物
library(refdb)
packageVersion("refdb")
library(tidyverse)
library(ggplot2)

##下载trnl数据from NCBI
#plant_trnl_dataset <- refdb_import_NCBI("txid33090[ORGN] AND (trnL OR tRNA-Leu OR trn-L OR trn L) AND (chloroplast[Filter] OR plastid[Filter]) NOT environmental sample[Filter] NOT environmental samples[Filter] NOT environmental[Title] NOT uncultured[Title] NOT unclassified[Title] NOT unidentified[Title] NOT unverified[Title]",seq_bin = 2000)
#write.table(plant_trnl_dataset,"plant_trnl_dataset.txt",quote = F,sep = "\t")
lib <- read.delim2(file.choose(),header = T,check.names = F,stringsAsFactors = F)
lib <- lib[,-c(5,8,10,11,13,14,15)]
lib <- refdb_set_fields(lib,taxonomy = c(kingdom = "kingdom",class = "class",
                                      order = "order",family = "family",
                                      genus = "genus",species = "species"),
                         sequence = "sequence",marker = "gene")
##规范分类名
length(unique(lib$species))
lib <- refdb_clean_tax_remove_extra(lib)
length(unique(lib$species))
lib <- refdb_clean_tax_NA(lib)
length(unique(lib$species))
lib <- refdb_clean_tax_remove_uncertainty(lib)
length(unique(lib$species))
lib <- refdb_clean_tax_remove_subsp(lib)
length(unique(lib$species))
lib <- refdb_clean_tax_NA(lib)
length(unique(lib$species))

##清洗数据
refdb_plot_seqlen_hist(lib)
#lib1 <- refdb_filter_seq_duplicates(lib)###去除重复
lib <- refdb_clean_seq_remove_gaps(lib)
lib <- refdb_clean_seq_crop_primers(lib,primer_forward = "CGAAATCGGTAGACGCTACG", primer_reverse = "CCATTGAGTCTCTGCACCTATC", 
                                    max_error_in = 0.6, max_error_out = 0.6, include_primers = T)
lib <- refdb_filter_seq_length(lib,min_len = 35,max_len = 500)
refdb_plot_seqlen_hist(lib)

lib %>% group_by(family) %>% count() %>% 
  ggplot(aes(fct_reorder(family, n, .desc = TRUE), n)) +
  geom_col() +
  xlab("family") +
  ylab("Number of records") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
refdb_plot_tax_treemap(lib)
refdb_plot_tax_tree(lib)

lib <- refdb_set_fields(lib, latitude = "latitude", longitude = "longitude")
lib[,13:14] <- lapply(lib[,13:14],as.numeric)
refdb_plot_map(lib)

##导出

x <- paste(paste("k__",lib1$kingdom,sep = ""),
           paste("p__",lib1$phylum,sep = ""),
           paste("c__",lib1$class,sep = ""),
           paste("o__",lib1$order,sep = ""),
           paste("f__",lib1$family,sep = ""),
           paste("g__",lib1$genus,sep = ""),
           paste("s__",lib1$species,sep = ""),
           sep = ";")
x <- gsub(" ","_",paste(">",x,sep = ""))

ref <- as.vector(matrix(c(x, lib1$sequence), nrow = 2, byrow = TRUE))
re1 <- data.frame(ref)
#write.table(re1,"ref1_plant_trnl.fasta",row.names = F,col.names = F,quote = F,sep = "\t")




co1_dataset <- refdb_import_NCBI("txid6656[ORGN] AND (CO1 OR CO-1 OR CO 1 OR COI OR CO I OR CO-I) NOT environmental sample[Filter] NOT environmental samples[Filter] NOT environmental[Title] NOT uncultured[Title] NOT unclassified[Title] NOT unidentified[Title] NOT unverified[Title]",
                                      seq_bin = 1000)

####################################################################################


###############alpha#############

#Flattening Method 1
#Firstly, we need to load the "vegan" package

#Load the working directory, which needs to be replaced with your own
setwd("D:/办公/食物条形码/正式数据/数据转换/ncbi手动比对/饮食数据")
#Load otu table （or ASV）
otu = read.table(file.choose(), header=T, sep="\t", quote = "", row.names=1, comment.char="",stringsAsFactors = FALSE) 
#Sum to view the sum of each sample
colSums(otu)
#Use this code for leveling
otu_Flattening = as.data.frame(t(rrarefy(t(otu), min(colSums(otu)))))
#View the sum of each sample after leveling
colSums(otu_Flattening)
#Save the flattened OTU table to this working directory for future diversity analysis
write.table (otu_Flattening, file ="183asv-otu_Flattening_diet.txt",sep ="\t", quote =FALSE) #结果导出

#######################################################################
#Flattening Method 2
#Installation package
#If you have not installed the photoseq package, you can use the following code to install it
if(!requireNamespace("BiocManager")){
  install.packages("BiocManager")
}
BiocManager::install("phyloseq")

#Load Package 1
library(phyloseq)
#Set a random seed to facilitate repetition
set.seed(123)

otu = read.table(file.choose(), header=T, sep="\t", quote = "", row.names=1, comment.char="",stringsAsFactors = FALSE) 
otu <- t(otu)
otu_1 = otu_table(otu, taxa_are_rows = T)
otu_2 = phyloseq(otu_1)

#Note that this method will automatically remove some low abundance OTUs
otu_Flattening1 = rarefy_even_depth(otu_2,replace = TRUE)
#8OTUs were removed because they are no longer present in any sample after random subsampling
#Check the changes before and after leveling
sample_sums(otu_2)
sample_sums(otu_Flattening1)

#Extract the flattened otu table
otu_Flattening1 = as.data.frame(otu_Flattening1@.Data )

#Save the flattened OTU table to this working directory for future diversity analysis
write.table (otu_Flattening1, file ="otu_Flattening1.csv",sep =",", quote =FALSE) 

###########################################

###α Diversity calculation
#Clear all variables
rm(list=ls())
#Load vegan package
library(vegan)
#Reading species data
otu<-read.table(file.choose(),header = T,row.names = 1,check.names=F)
#Shannon index
Shannon<-diversity(otu, index = "shannon", MARGIN = 2, base = exp(1))
#Simpson index
Simpson<-diversity(otu, index = "simpson", MARGIN = 2, base = exp(1))
#Richness index
Richness <- specnumber(otu,MARGIN = 2)
#merge
index1<-as.data.frame(cbind(Shannon,Simpson,Richness))
#The diversity index to be analyzed next is generally not a key analysis object, but since it needs to be written, it should be organized in a more complete manner
#Transpose species data
totu<-t(otu)
totu<-ceiling(as.data.frame(t(otu)))
#diversity index
obs_chao1_ace<-t(estimateR(totu))
obs_chao1_ace<-obs_chao1_ace[rownames(index1),]
index1$Chao1<-obs_chao1_ace[,2]
index1$Ace<-obs_chao1_ace[,4]
index1$Sobs<-obs_chao1_ace[,1]
index1$Pielou <- Shannon / log(Richness, 2)
index1$Goods_coverage <- 1 - colSums(otu == 1) / colSums(otu)
#Merge and export data
write.table(cbind(sample=c(rownames(index1)),index1),'183asv-totalcp.alpha_diet_chouping.txt',row.names = F,sep = '\t',quote = F)


###########Visualization 1############
library(amplicon)
# Read metadata, specify parameters including title row (TRUE), column name as 1 column, tab separated, no comment row, and do not convert to factor type
metadata = read.table("../Data/Science2019/metadata.txt", header=T, row.names=1, sep="\t", comment.char="", stringsAsFactors = F)
# Preview the first 3 rows of metadata, pay attention to grouping column names
head(metadata, n = 3)

# Read vegan and calculate six alpha diversity indices. 
alpha_div = read.table("../Data/Science2019/alpha/vegan.txt", header=T, row.names=1, sep="\t", comment.char="")
# Preview the first 3 lines of the diversity index, annotate the column names of each index
head(alpha_div, n = 3)
df1 <- read.delim(file.choose(),row.names = 1,header = T)
# Draw the Shannon index distribution for each group, and the outer layer () can preview the saved graphics simultaneously
(p = alpha_boxplot(df1, index = "simpson", df, groupID = "season"))

# 保存图片，指定图片为pdf格式方便后期修改，图片宽89毫米，高56毫米
ggsave(paste0("alpha_boxplot_shannon.pdf"), p, width=89, height=56, units="mm")
ggsave(paste0("8.png"), p, width=89, height=56, units="mm")

##################Visualization 2###########

library(ggplot2)
library(dplyr)
library(ggpubr) 
setwd("D:/办公/食物条形码/正式数据/微生物/陈-数据/功能预测")
data <- read.delim("179asv-totalcp.alpha_diet_chouping.txt",row.names = 1)
data <- as.data.frame(t(data))
data$ID <-row.names(data) 
meta <- read.delim("metadata.txt",row.names = 1)
meta$ID <- row.names(meta)
data <- merge(data, meta, by = 'ID')

data <- read.delim(file.choose(),header = T,row.names = 1)
data <- sweep(data,2,colSums(data),"/")
data <- t(data)
data <- data.frame(data)
data$ID <- rownames(data)
data1 <- merge(data, metadata, by = 'ID')

.data <- sweep(data,2,colSums(data),"/")  #相对丰度

write.table(data,"L2-.txt",sep = "\t" , quote = F)

meta <- read.delim(file.choose(),header = T)

data2 <- merge(data1,meta,by.x = "ID", by.y = "ID")

#挑选子集
d1 <- data1[which(data1$gender=="Male"),]
d2 <- data1[which(data1$gender=="Female"),]

col1 = rgb(250/255,60/255,60/255)
col2 = rgb(0/255,220/255,0/255)
col3 = rgb(30/255,60/255,255/255)
col4 = rgb(0/255,200/255,200/255)
col5 = rgb(240/255,0/255,130/255)
col6 = rgb(230/255,220/255,50/255)
col7 = rgb(240/255,130/255,40/255)
col8 = rgb(160/255,0/255,200/255)
col9 = rgb(160/255,230/255,50/255)
col10 = rgb(0/255,160/255,255/255)
col11 = rgb(230/255,175/255,45/255)
col12 = rgb(0/255,210/255,140/255)
col13 = rgb(247/255,153/255,209/255)

color <- c(col1,col3,col7,col13,col12)
data1 <- data

data1$BC <- factor(data1$BC,levels = c("Enterotype1", "Enterotype2","Enterotype3", "Enterotype4"))#排序
data1$season <- factor(data1$season,levels = c("spring","summer","autumn","winter"))
#comparisons=list(c("Spring","Summer"), c("Spring","Autumn"),c("Spring","Winter"),c("Summer","Autumn"),c("Summer","Winter"),c("Autumn","Winter"))
#comparisons=list(c("spring","summer"), c("spring","autumn"),c("spring","winter"),c("summer","autumn"),c("summer","winter"),c("autumn","winter"))
#comparisons=list(c("Enterotype1", "Enterotype2"),c("Enterotype1", "Enterotype3"),c("Enterotype1", "Enterotype4"), c("Enterotype2", "Enterotype3"),c("Enterotype2", "Enterotype4"),c("Enterotype3", "Enterotype4"))
#comparisons=list(c("Enterotype1", "Enterotype3"),c("Enterotype1", "Enterotype4"),c("Enterotype3", "Enterotype4"))
#comparisons=list(c("Male", "Female"))

p <- ggboxplot(data1, x = "BC", y = "Ruminococcaceae.UCG.013",color = "BC",add="jitter",width =0.3,size=1)+
  xlab("Enterotype")+theme(panel.background=element_blank(),panel.border=element_rect(linetype="solid",fill=NA))+
  scale_color_manual(values = color)+
  theme(axis.text=element_text(size=15,color="black"),axis.title=element_text(size=15,face="bold",color="black"))+
  theme(legend.position = "right",legend.text=element_text(face="bold",size=12))+
  stat_compare_means(method = "kruskal", size = 3)+#添加kw检验
  stat_compare_means(method = "wilcox.test",comparisons=list(c("Enterotype1", "Enterotype2"),c("Enterotype1", "Enterotype3"),c("Enterotype1", "Enterotype4"), c("Enterotype2", "Enterotype3"),c("Enterotype2", "Enterotype4"),c("Enterotype3", "Enterotype4")),label='p.signif',map_signif_level=T)

p




p <- ggboxplot(data1, x = "gender", y = "Shannon",color = "gender",add="jitter",width =0.3,size=1)+
  xlab("gender")+theme(panel.background=element_blank(),panel.border=element_rect(linetype="solid",fill=NA))+
  scale_color_manual(values = color)+
  theme(axis.text=element_text(size=15,color="black"),axis.title=element_text(size=15,face="bold",color="black"))+
  theme(legend.position = "right",legend.text=element_text(face="bold",size=12))+
  stat_compare_means(method = "kruskal", size = 3)+#添加kw检验
  stat_compare_means(method = "wilcox.test",comparisons=list(c("Male", "Female")),label='p.signif',map_signif_level=T)
p

#同一季节显示不同性别
ggplot(data1,aes(season,Simpson,fill=gender))+geom_boxplot()+
  theme(panel.background=element_blank(),panel.border=element_rect(linetype="solid",fill=NA))+
  theme(legend.position = "right",legend.text=element_text(face="bold",size=12))+
  theme(axis.text=element_text(size=15,color="black"),axis.title=element_text(size=15,face="bold",color="black"))+
  stat_compare_means(method = "kruskal", size = 3)
  stat_compare_means(method = "wilcox.test",comparisons=list(c("Male","Female")),label='p.signif',map_signif_level=T)


################Difference results##########
##Calculate difference results
library(rstatix)

da <- read.table(file.choose(),row.names = 1,header = T)

v <- compare_means(Shannon ~ season,da)
c <- compare_means(Simpson ~ season,da)
b <- compare_means(Shannon ~ gender,da,group.by = "season")
d <- compare_means(Simpson ~ gender,da,group.by = "season")
f <- compare_means(Simpson ~ season, da, method = "kruskal.test")
kruskal.test(Simpson ~ season,data=da)
kruskal.test(Shannon ~ season,data=da)
wilcox.test(Simpson ~ season, data = da ,group.by = "season")

ss <- da[which(da$season=="spring"),]
s <- da[which(da$season=="summer"),]
ss <- rbind(ss,s)

wilcox.test(Simpson ~ season, data = ss ,group.by = "season")


da %>%
  group_by(season) %>%
  wilcox_test(data =., Simpson ~ season) %>%
  adjust_pvalue(method = "bonferroni") %>%
  add_significance("p.adj")

da %>% wilcox_test(Simpson ~ season)

da %>% wilcox_test(Shannon ~ season)

#Correctly running ANOSIM in R - detecting the significance of differences between sample groups
library("vegan")

data <- read.table(file.choose(),row.names = 1, header = T)

data <- t(data)

meta <- read.table(file.choose(), header = T)

distance.bray<-vegdist(data,method = 'bray')

anosim.result<-anosim(distance.bray,meta$season,permutations = 999)

summary(anosim.result)


######################################################################


#NMDS

library(vegan)
#install.packages("vegan")
##第 1 种模式，输入距离矩阵排序
#读取 OTU 丰度表
a <- read.csv(file.choose())
?write.table
write.table(a,"a.txt",quote = F, row.names = T,sep = "\t")


otu <- read.table("D:/办公/食物条形码/测试数据/zokor1/a.txt",header = T ,row.names = 1)
otu <- data.frame(t(otu))

#转相对丰度
otu1 <- sweep(otu,2,colSums(otu),"/")

bray_dis <- vegdist(otu, method = 'bray')

nmds_dis <- metaMDS(bray_dis, k = 2)
#应力函数值，一般不大于 0.2 为合理
nmds_dis$stress
#样方得分
nmds_dis_site <- data.frame(nmds_dis$points)
#write.table(nmds_dis_site, 'nmds_dis_site.txt', sep = '\t', col.names = NA, quote = FALSE)

#详情 ?wascores
nmds_dis_species <- wascores(nmds_dis$points, otu)

library(ggplot2)

#主要展示 top10 丰度物种
abundance <- apply(otu1, 2, sum)
abundance_top10 <- names(abundance[order(abundance, decreasing = TRUE)][1:10])
species_top10 <- data.frame(nmds_dis_species[abundance_top10,1:2])
species_top10$name <- rownames(species_top10)


#添加分组信息 上传分组文件

nmds_dis_site$name <- rownames(nmds_dis_site)
map<-read.table("D:/办公/食物条形码/测试数据/zokor1/metadata.txt",header=T,sep="\t",row.names=1)
#nmds_dis_site$group <- map$group
merged=merge(nmds_dis_site,map,by="row.names",all.x=TRUE)
color=c( "#3C5488B2","#00A087B2", 
         "#F39B7FB2","#91D1C2B2", 
         "#8491B4B2", "#DC0000B2", 
         "#7E6148B2","yellow", 
         "darkolivegreen1", "lightskyblue", 
         "darkgreen", "deeppink", "khaki2", 
         "firebrick", "brown1", "darkorange1", 
         "cyan1", "royalblue4", "darksalmon", 
         "darkgoldenrod1", "darkseagreen", "darkorchid")
#grid.col[row.names(data)] = color[1:dim(data)[1]]

p <- ggplot(data = merged, aes(MDS1, MDS2)) +
  geom_point(size=2,aes(color =  SampleName,shape = Gender)) +
  stat_ellipse(aes(fill = Gender), geom = 'polygon', level = 0.95, alpha = 0.1, show.legend = FALSE) +   #添加置信椭圆，注意不是聚类
  scale_color_manual(values =color[1:length(unique(map$Gender))]) +
  scale_fill_manual(values = color[1:length(unique(map$Gender))]) +
  theme(panel.grid.major = element_line(color = 'gray', size = 0.2), panel.background = element_rect(color = 'black', fill = 'transparent'), 
        plot.title = element_text(hjust = 0.5),legend.title = element_blank()) +
  #, legend.position = 'none'
  geom_vline(xintercept = 0, color = 'gray', size = 0.5) +
  geom_hline(yintercept = 0, color = 'gray', size = 0.5) +

geom_text(data = species_top10, aes(label = name), color ="royalblue4", size = 4)+
  geom_text(data =merged, aes(label = Row.names,x =MDS1, y = MDS2), size=4, check_overlap = TRUE)


#geom_text(data = species_top10, aes(label = name), color = 'blue', size = textsize)

p

# 热图
install.packages("pheatmap")
library(pheatmap)
otu <- read.table("D:/办公/食物条形码/测试数据/yaks/otu.txt",header = T ,row.names = 1)
otu <- t(otu)
pheatmap(otu[1:10])


#Find relative abundance

res4 <- sweep(otu,2,colSums(otu),`/`)

write.csv(res4,"res4.csv")

#2
#加载R包
library(yyplot)
install.packages("yyplot")
BiocManager::install("yyplots")
#安装不了时，用以下方式
install.packages("devtools")
library(devtools)
BiocManager::install("ggtree")
install_github("GuangchuangYu/yyplot")
devtools::install_github("https://github.com/tidyverse/ggplot2.git",force = TRUE)

library(yyplot)
library(ggbiplot)
library(vegan)
library(ggplot2)
#导入样本和分组文件
sample <- read.table("D:/办公/食物条形码/测试数据/zokor1/a.txt",header = T ,row.names = 1,sep = "\t")
group <- read.table("D:/办公/食物条形码/测试数据/zokor1/metadata.txt",sep = "\t",header = T,row.names = 1)
group <- group[match(rownames(sample),rownames(group)),] #匹配行名，很重要
#nmds分析
nmds1 <- metaMDS(sample, distance = 'bray', k = 2)
summary(nmds1)
#提取数据
nmds1.stress <- nmds1$stress
nmds1.point <- data.frame(nmds1$point)
nmds1.species <- data.frame(nmds1$species)
sample_site <- nmds1.point[1:2]
sample_site$names <- rownames(sample_site)
colnames(sample_site)[1:2] <- c('NMDS1', 'NMDS2')
#合并分组数据
sample_site <- cbind(sample_site,group)

#NMDS图绘制
nmds_plot <- ggplot() +
  geom_point(data = sample_site, aes(NMDS1, NMDS2,color = SampleName , shape = Gender), size = 5, alpha = 0.8,) + #可在这里修改点的透明度、大小
  #scale_shape_manual(values = c(17, 16)) + #可在这里修改点的形状
  #scale_color_manual(values = c('red', 'blue')) + #可在这里修改点的颜色
  theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent')) + #去掉背景  
  theme(legend.key = element_rect(fill = 'transparent'), legend.title = element_blank()) + #去掉图例标题及标签背景
  labs(x = 'NMDS axis1', y = 'NMDS axis2', title = paste('Stress =', round(nmds1$stress, 4))) +
  theme(plot.title = element_text(hjust = 0.5))+  #标题居中
  theme(panel.background = element_blank(),axis.line = element_line(color = "black"))#去上右边框

nmds_plot
#NMDS图绘制
nmds_plot <- ggplot() +
  geom_point(data = sample_site, aes(NMDS1, NMDS2,color = SampleName , shape = Gender), size = 5, alpha = 0.8) + #可在这里修改点的透明度、大小
  #scale_shape_manual(values = c(17, 16)) + #可在这里修改点的形状
  #scale_color_manual(values = c('red', 'blue')) + #可在这里修改点的颜色
  geom_ord_ellipse(aes(sample_site$NMDS1,sample_site$NMDS2,group= sample_site$Gender), ##添加0.8置信椭圆
                   ellipse_pro = 0.8,linetype=2,size=0.7,color='firebrick')+
  geom_ord_ellipse(aes(sample_site$NMDS1,sample_site$NMDS2,color= sample_site$specie,group= sample_site$Gender),
                   ellipse_pro = 0.9,linetype=3,size=1)+ ##添加0.9置信椭圆
  theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent')) + #去掉背景  
  theme(legend.key = element_rect(fill = 'transparent'), legend.title = element_blank()) + #去掉图例标题及标签背景
  labs(x = 'NMDS axis1', y = 'NMDS axis2', title = paste('Stress =', round(nmds1$stress, 4))) +
  theme(plot.title = element_text(hjust = 0.5))+  #标题居中
  theme(panel.background = element_blank(),axis.line = element_line(color = "black"))#去上右边框

#venn图
install.packages("ggvenn")
library(ggvenn)

ggvenn_4 <- ggplot(otu, aes(A = `M224`, B = `M225`, C = `M226`, D = `M227`)) +
  geom_venn(fill_color=mypal,fill_alpha = .7,stroke_linetype = "longdash",set_name_size = 8,
            text_size=5) + 
  theme_void()+
  coord_fixed() +
  labs(title = "Example of ggvenn:: geom_venn function",
       subtitle = "processed charts with geom_venn()",
       caption = "Visualization by DataCharm") +
  theme(plot.title = element_text(hjust = 0.5,vjust = .5,color = "black",face = 'bold',
                                  size = 20, margin = margin(t = 1, b = 12)),
        plot.subtitle = element_text(hjust = 0,vjust = .5,size=15),
        plot.caption = element_text(face = 'bold',size = 12))


#######################PCOA################

#载入需要用到的包
library(vegan)
library(ggplot2)
library(ggrepel)
library(openxlsx)
#读取数据
metadata <- read.delim(file.choose(),row.names = 1)

#将分组列转换为因子类型，以便于画图时使用
metadata$Sample.Name <-  as.factor(metadata$Sample.Name)
metadata$specie<-  as.factor(metadata$specie)#同上


#读取otu表
df <- read.delim(file.choose(),sep = "" ,row.names = 1)
df <- t(df)
#数据处理——计算距离

#使用vegdist函数计算距离（需要计算的数据，method=“所计算的距离类型，通常为bray”）
distance <- vegdist(df,method = "bray")

#转换为数据框
dis <- as.matrix(distance)
write.table(dis,"pcoa.txt",sep = "\t" , quote = F)

#数据处理——pcoa分析

#使用cmdscale函数进行pcoa分析（上一步计算的距离，k=需要降维到几维通常为2维，eig=TRUE为返回eig值下面计算置信区间需要用到）
pcoa <- cmdscale(distance,k=2,eig = TRUE)

#将上步pcoa分析结果中的points转换为数据框并赋值给plot_data，该数据在画图时需要使用
plot_data <- data.frame({pcoa$points})

#将pcoa处理返回结果中的eig赋值，下面计算置信区间需要用到
eig <- pcoa$eig

#将两个分组列和经过pcoa处理后的point数据整合赋值给data以便于画图使用
data <- data.frame(metadata$Sample.Name,metadata$specie,plot_data)
names(data) <- c("c","s","PCoA1",'PCoA2')#对data列命名

#画图
p <- ggplot(data=data,aes(x=PCoA1,y=PCoA2,color=c,shape = s)) + 
  #geom-point函数为散点图函数，alpha控制图形的半透明度，越小越透明，size控制点的大小  
  geom_point(alpha=1,size=2) +
  #stat-ellipse为绘制椭圆的函数（aes（fill=你想用椭圆圈住的分组列，例子中圈主的是形状），type=椭圆对应的概率分布，默认为t分布，norm为多元分布，geom=控制图形的几何对象，通常为polygon，color=椭圆边界颜色）
  stat_ellipse(aes(fill=s),type = "norm",geom="polygon",alpha=0.2,color=NA ,level = 0.95) + 
  #labs函数为给图形横纵轴加标签，100*eig[2]/sum(eig)为计算置信度的公式
  labs(x=paste("PCoA1(",format(100*eig[1]/sum(eig),digits = 4),"%)",sep=""),y=paste("PCoA2(",format(100*eig[2]/sum(eig),digits = 4),"%)",sep="")) + 
  #添加参考线，也就是例子中的虚线，vline为纵向参考线，hline为横向，xintercept=为参考线与x轴的交点，linetype="dotted"为虚线
  geom_vline(aes(xintercept=0),linetype="dotted")+ 
  geom_hline(aes(yintercept=0),linetype="dotted") + 
  #theme函数控制背景参数，panel.background为画布参数设置，fill为背景颜色，colour为图边框颜色。axis.title.x=element_text(colour = 'black',size=20),axis.title.y = element_text(colour = 'black',size=20)为设置坐标轴标签文本的颜色大小。legend.text = element_text(size = 15)为设置图中示例的文字大小
  theme(panel.background = element_rect(fill='white',colour = 'black'),axis.title.x=element_text(colour = 'black',size=20),axis.title.y = element_text(colour = 'black',size=20),legend.text = element_text(size = 15))

p

p1 <- ggplot(data=data,aes(x=PCoA1,y=PCoA2,shape = s)) + 
  #geom-point函数为散点图函数，alpha控制图形的半透明度，越小越透明，size控制点的大小  
  geom_point(alpha=1,size=2) +
  #stat-ellipse为绘制椭圆的函数（aes（fill=你想用椭圆圈住的分组列，例子中圈主的是形状），type=椭圆对应的概率分布，默认为t分布，norm为多元分布，geom=控制图形的几何对象，通常为polygon，color=椭圆边界颜色）
 
  #labs函数为给图形横纵轴加标签，100*eig[2]/sum(eig)为计算置信度的公式
  labs(x=paste("PCoA1(",format(100*eig[1]/sum(eig),digits = 4),"%)",sep=""),y=paste("PCoA2(",format(100*eig[2]/sum(eig),digits = 4),"%)",sep="")) + 
  #添加参考线，也就是例子中的虚线，vline为纵向参考线，hline为横向，xintercept=为参考线与x轴的交点，linetype="dotted"为虚线
  geom_vline(aes(xintercept=0),linetype="dotted")+ 
  geom_hline(aes(yintercept=0),linetype="dotted") + 
  #theme函数控制背景参数，panel.background为画布参数设置，fill为背景颜色，colour为图边框颜色。axis.title.x=element_text(colour = 'black',size=20),axis.title.y = element_text(colour = 'black',size=20)为设置坐标轴标签文本的颜色大小。legend.text = element_text(size = 15)为设置图中示例的文字大小
  theme(panel.background = element_rect(fill='white',colour = 'black'),axis.title.x=element_text(colour = 'black',size=20),axis.title.y = element_text(colour = 'black',size=20),legend.text = element_text(size = 15))


#########################################################

############普氏分析################

#Procrustes analysis
library("vegan")
library("ggplot2")
library("cowplot")
#set working environment
setwd("C:/Users/ZHUPAN/Desktop/数据图/qiime分类-183asv")
getwd()
#bray-curtis similarity of diet and microbiome, Mantel test 
metadata = read.table(file.choose(), header = TRUE, check.names = FALSE, row.names = 1)

df1 = read.csv(file.choose(), header= TRUE,check.names = FALSE, row.names = 1)

df2 = read.csv(file.choose(), header= TRUE,check.names = FALSE, row.names = 1)


df1 <- t(df1)
df2 <- t(df2)
#abundance data frame - bray curtis dissimilarity
dist.abund <- vegdist(df1, method = "bray")
dist.abund <- as.dist(dist.abund)
mdist.abund = vegdist(df2, method = "bray")
mdist.abund <- as.dist(mdist.abund)
#make pcoas
dpcoa <- as.data.frame(cmdscale(dist.abund)) 

mpcoa <- as.data.frame(cmdscale(mdist.abund))

#procrustes analysis
pro <- procrustes(X = dpcoa, Y = mpcoa, scale = TRUE,symmetric = TRUE)

pro_test <- protest(dpcoa,mpcoa,perm=9999)

eigen <- sqrt(pro$svd$d)
percent_var <- signif(eigen/sum(eigen), 4)*100

beta_pro <- data.frame(pro$X)
trans_pro <- data.frame(pro$Yrot)
beta_pro$UserName <- rownames(beta_pro)
beta_pro$type <- "Diet(Bray_curtis)"

seasons=metadata[,1]

beta_pro=cbind(beta_pro,seasons)

trans_pro$UserName <- rownames(trans_pro)
trans_pro$type <- "Microbiome"
seasons=metadata[,1]

trans_pro=cbind(trans_pro,seasons)
colnames(trans_pro) <- colnames(beta_pro)
pval <- signif(pro_test$signif, 1)
plot <- rbind(beta_pro, trans_pro)
col1 = rgb(250/255,60/255,60/255)
col4 = rgb(0/255,200/255,200/255)
col8 = rgb(160/255,0/255,200/255)
col10 = rgb(0/255,160/255,255/255)


grass_food_micro <- ggplot(plot) +
  geom_point(size = 4, alpha=0.95, aes(x = V1, y = V2, color = seasons,shape=type))+ 
  scale_color_manual(values = c(col1,col3,col7,col13,col12)) +
  theme_classic() +
  scale_x_continuous(limits = c(-0.18,0.25))+
  scale_y_continuous(limits = c(-0.18,0.25))+
  geom_line(aes(x= V1, y=V2, group=UserName), col = "darkgrey", alpha = 0.6,size=0.2) +
  theme(panel.background = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.title = element_blank(),
        legend.text = element_text(size=10,colour="black"),
        legend.position = 'bottom',
        axis.text = element_text(size=10,colour="black"),
        axis.title = element_text(size=13,colour="black"),
        aspect.ratio = 1) +
  guides(color = guide_legend(ncol = 1)) +
  annotate("text", x = 0.17, y = -0.17, label = paste0("p-value=",pval), size = 4) +
  xlab(paste0("PC 1 [",percent_var[1],"%]")) +
  ylab(paste0("PC 2 [",percent_var[2],"%]")) 

grass_food_micro_leg <- get_legend(grass_food_micro) 

grass_food_micro + theme(legend.position = "right")


plot$seasons <- factor(plot$seasons,levels = c("spring","summer","autumn","winter"))

p <- ggplot(plot1) +
  geom_point(aes(V1, V2, color = seasons), size = 1.5, shape = 16) +
  geom_point(aes(X1, X2, color = seasons), size = 1.5, shape = 1) +
  scale_color_manual(values = c(col8,col1,col10,col4)) +
  geom_segment(aes(x = V1, y = V2, xend = X1, yend = X2), arrow = arrow(length = unit(0.1, 'cm')),
               color = 'blue', size = 0.3) +
  theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent'),
        legend.key = element_rect(fill = 'transparent')) +
  labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
  geom_vline(xintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
  geom_hline(yintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
  geom_abline(intercept = 0, slope = X[1,2]/X[1,1], size = 0.3) +
  geom_abline(intercept = 0, slope = X[2,2]/X[2,1], size = 0.3) +
  annotate('text', label = sprintf('M^2 == 0.2178'),
           x = -0.21, y = 0.42, size = 3, parse = TRUE) +
  annotate('text', label = 'P < 0.001',
           x = -0.21, y = 0.38, size = 3, parse = TRUE)

p



################################################

#########Bubble Matrix(气泡矩阵图)###############

setwd("D:/办公/食物条形码/正式数据/数据转换/ncbi手动比对/性别差异")
getwd()
male <- read.delim("diet-re-top50-无GS10.txt", header = T,row.names = 1)
data <- as.data.frame(t(data))
#去除空白行
male <- male[rowSums(is.na(male)) != ncol(male),]

lmale <- sweep(lmale,2,colSums(lmale),"/")

write.table(male,"lfemale-relative-diet.txt", quote = F, sep = "\t")

male$ID <- rownames(male)

#注释：header=T表示数据中的第一行是列名，如果没有列名就用header=F
library(reshape2)
library(ggplot2)                          

data_melt<-melt (male)
names(data_melt) = c('ID','Family', 'Value')
data_melt <- merge(data_melt, metadata, by = 'ID')
#注释：melt()函数把表格中的宽数据变成长数据
p<-ggplot(data_melt, aes(x = season, y = Family, size = Value, color=Family)) + geom_point()


data_melt$season <- factor(data_melt$season,levels = c("spring","summer","autumn","winter"))
data_melt$Family <-  factor(data_melt$Family,levels = c("Rosaceae", "Poaceae", "Plantaginaceae","Lamiaceae", "Rutaceae", "Urticaceae", "Elaeagnaceae", "Fabaceae", "Onagraceae", "Ranunculaceae", "Papaveraceae", "Sabiaceae", "Araceae", "Asparagaceae", "Smilacaceae", "Musaceae", "Orchidaceae", "Amaryllidaceae", "Pinaceae", "Equisetaceae", "Orthotrichaceae", "Bryaceae", "Grimmiaceae", "Mniaceae", "Meteoriaceae", "Amblystegiaceae", "Brachytheciaceae", "Leptodontaceae", "Coriariaceae", "Oxalidaceae", "Helwingiaceae", "Rubiaceae", "Araliaceae", "Apiaceae", "Grossulariaceae", "Salicaceae", "Saxifragaceae", "Asteraceae", "Hydrangeaceae", "Boraginaceae", "Caprifoliaceae", "Balsaminaceae", "Gentianaceae", "Celastraceae", "Actinidiaceae", "Aquifoliaceae", "Adoxaceae", "Loranthaceae", "Polygonaceae", "Caryophyllaceae"))
data_melt$Family <-  factor(data_melt$Family,levels = c("Rosaceae","Actinidiaceae","Balsaminaceae","Polygonaceae","Poaceae","Amaryllidaceae","Sabiaceae","Grossulariaceae","Rubiaceae","Smilacaceae","Saxifragaceae","Aquifoliaceae","Urticaceae","Asteraceae","Fabaceae","Adoxaceae","Ericaceae","Lamiaceae","Apiaceae","Rutaceae","Caryophyllaceae","Oxalidaceae","Coriariaceae","Helwingiaceae","Caprifoliaceae","Araceae","Equisetaceae","Asparagaceae","Ranunculaceae","Celastraceae","Loranthaceae","Orchidaceae","Salicaceae","Gentianaceae","Liliaceae","Papaveraceae","Berberidaceae","Boraginaceae","Onagraceae","Lardizabalaceae","Schisandraceae","Araliaceae","Sematophyllaceae","Brachytheciaceae","Lauraceae","Fagaceae","Lycopodiaceae","Nartheciaceae","Betulaceae","Dicranaceae"))


#注释：package使用之前需要调用
p<-ggplot(data_melt, aes(x = season, y = Family, size = Value, color=season)) + geom_point()+
  theme(panel.background = element_blank(),
        panel.grid.major = element_line(colour = "gray"),
        panel.border = element_rect(colour="black",fill=NA))+
  scale_color_manual(values = color)
p




male <- data[which(data$gender=="Male"),]
female <- data[which(data$gender=="Female"),]
View(female)
View(male)
row.names(female) <- female$ID
row.names(male) <- male$ID

male <- male[,1:51]
female <- female[,1:51]
female <- as.data.frame(t(female))
male <- as.data.frame(t(male))



#########################################

##########热图##################

library(pheatmap)
l1 <- read.delim(file.choose(),row.names = 1,header = T)
#计算相对丰度
l1_1 <- sweep(l1,2,colSums(l1),"/")
#读取分组
me <- read.delim(file.choose(),row.names = 1,header = T)

p <- pheatmap(l1_1,cluster_rows = T,cluster_cols = F,
         color=colorRampPalette(c("navy","white","firebrick3"))(100),
         show_colnames = T,border_color = NA,scale = "row",show_rownames =T,
         annotation_col = me,
         display_numbers = matrix(ifelse(l1_1 > 2, "*", ""), nrow(l1_1)))

me <- c("#708090",'#68A180','#F3B1A0', '#D6E7A3')
names(me) <- c("spring","summer","autun","winter")



############kegg上色#####################

setwd("D:/办公/食物条形码/正式数据/微生物/陈-数据/肠形/肠型功能")
kegg <- read.delim(file.choose(),row.names = 1 ,header = T)

kegg <- sweep(kegg,2,colSums(kegg),"/")

write.table(kegg,"kegg.txt" , quote = F , sep = "\t")


library(ggplot2)
library(reshape2)

# 读取文件
KEGG <- read.table("肠型1.txt",header = TRUE,sep = "\t")



# KEGG第一层分类中名字特别长，需要自动换行(替换空格为换行\n)
swr = function(string, nwrap = 12){
  paste(strwrap(string,width = nwrap),collapse = "\n")
}
swr = Vectorize(swr)
KEGG$L1 <- swr(KEGG$L1)

# 绘制L2级和丰度的柱状图，按L1着色并分面
p <- ggplot(KEGG,aes(Abundance,L2)) +
  geom_bar(aes(fill = L1),stat = "identity",width = 0.6) +
  xlab("Relative abundance (%)") + 
  ylab("KEGG Pathway") +
  theme(panel.background = element_rect(fill = "white",colour='black'),
        panel.grid.major = element_line(color = "grey",linetype = "dotted",size = 0.3),
        panel.grid.minor = element_line(color = "grey",linetype = "dotted",size = 0.3),
        axis.ticks.length = unit(0.4,"lines"), 
        axis.ticks = element_line(color='black'),
        axis.line = element_line(colour = "black"), 
        axis.title.x=element_text(colour='black', size=8,face = "bold"),
        axis.title.y=element_text(colour='black', size=8),
        axis.text.x=element_text(colour='black',size=8),
        axis.text.y = element_text(color = "black",size = 8),
        legend.position = "none",
        strip.text.y = element_text(angle = 0,size = 12,face = "bold")) +
  facet_grid(L1~.,space = "free_y",scales = "free_y")
# 预览
p
# 保存矢量图
ggsave("肠型1-L2.pdf", p, width = 183, height = 240, units = "mm")


#######################################################

################流图###########################

rm(list=ls())

#ggualluvial
setwd('D:/办公/食物条形码/正式数据/数据转换/流图')
library("reshape2", quietly=T, warn.conflicts=F)
library("ggalluvial")
library("ggplot2")
library("RColorBrewer")
main_theme = theme(panel.background=element_blank(),
                   panel.grid=element_blank(),
                   axis.line.x=element_line(size=1, colour="black"),
                   axis.line.y=element_line(size=1, colour="black"),
                   axis.ticks=element_line(color="black"),
                   axis.text=element_text(color="black", size=18),
                   legend.position="right",
                   legend.background=element_blank(),
                   legend.key=element_blank(),
                   legend.text= element_text(size=13),
                   text=element_text(family="sans", size=18))
design = read.table("metadata.txt", header=T, row.names= 1, sep="\t")
otu_table = read.delim("diet-asv.txt", row.names= 1,  header=T, sep="\t")
taxonomy = read.delim("taxonomy.txt", row.names= 1,header=F, sep="\t")
colnames(taxonomy) = c("kingdom","phylum","class","order","family","genus","species")
idx = taxonomy$family == "f__"
taxonomy$full=as.character(taxonomy$family) 
taxonomy[idx,]$full=as.character(taxonomy[idx,]$family)
tax_count = merge(taxonomy, otu_table, by="row.names")
tax_count_sum = aggregate(tax_count[,-(1:9)], by=tax_count[9], FUN=sum) # mean
rownames(tax_count_sum) = tax_count_sum$full
tax_count_sum = tax_count_sum[,-1]
per = t(t(tax_count_sum)/colSums(tax_count_sum,na=T)) * 100 # normalization to total 100

mean_sort = per[(order(-rowSums(per))), ] # decrease sort
colSums(mean_sort)

mean_sort=as.data.frame(mean_sort)
rownames(mean_sort)[26] = c(" f__unknown")
mean_sort=mean_sort[rownames(mean_sort)!=" f__unknown",]
other = colSums(mean_sort[15:dim(mean_sort)[1], ])
mean_sort = mean_sort[1:(15-1), ]
mean_sort = rbind(mean_sort,other)
rownames(mean_sort)[15] = c("Others")
write.table(mean_sort,"mean_sort.txt" , sep = "\t",quote = F)
mean_sort = read.delim("mean_sort.txt",row.names = 1,header = T)

b=c("Others"," f__unknown")
mean_sort2=mean_sort[rownames(mean_sort)[!rownames(mean_sort)%in%b],]
100-apply(mean_sort2,2,sum)
others=100-apply(mean_sort2,2,sum)
others=t(as.data.frame(others))
mean_sort=rbind(mean_sort2,others)




write.table(mean_sort, file="Top14family_grass_RosFamily_14.txt", append = F, sep="\t", quote=F, row.names=T, col.names=T)

topN=rownames(mean_sort)


sub_design = subset(design,season %in% c("spring","summer","autumn","winter") )


sub_design$group=sub_design$season


sub_design$group  = factor(sub_design$group, levels=c("spring","summer","autumn","winter"))


print(paste("Number of group: ",length(unique(sub_design$group)),sep="")) # show group numbers


idx = rownames(sub_design) %in% colnames(mean_sort) 
sub_design = sub_design[idx,]
mean_sort = mean_sort[, rownames(sub_design)] # reorder according to design


mean_sort$family = rownames(mean_sort)

data_all = as.data.frame(melt(mean_sort, id.vars=c("family")))

data_all = merge(data_all, sub_design[c("group")], by.x="variable", by.y = "row.names")



p = ggplot(data_all, aes(x=variable, y = value, fill = family )) + 
  geom_bar(stat = "identity",position="fill", width=1)+ 
  scale_y_continuous(labels = scales::percent) + 
  facet_grid( ~ group, scales = "free_x", switch = "x") +  main_theme +
  theme(axis.ticks.x = element_blank(), legend.position="top", axis.text.x = element_blank(), strip.background = element_blank())+
  xlab("Groups")+ylab("Percentage (%)")           

p





mat = mean_sort[,1:(dim(mean_sort)[2]-1)]

mat_t = t(mat)

mat_t2 = merge(sub_design[c("group")], mat_t, by="row.names")

mat_t2 = mat_t2[,-1]

mat_mean = aggregate(mat_t2[,-1], by=mat_t2[1], FUN=mean) # mean
mat_mean_final = do.call(rbind, mat_mean)[-1,]


geno = mat_mean$group
colnames(mat_mean_final) = geno
mat_mean_final = as.data.frame(mat_mean_final)
mat_mean_final$family = rownames(mat_mean_final)

# Table transform
data_all = as.data.frame(melt(mat_mean_final, id.vars=c("family")))
d1=data_all[data_all[,2]=="spring",]
d11=d1[,2:3]
rownames(d11)=d1[,1]
d111=d11[order(-d11$value),]
d1111=data.frame(family=rownames(d111),d111)
d2=data_all[data_all[,2]=="summer",]
d22=d2[,2:3]
rownames(d22)=d2[,1]
d222=d22[rownames(d111),]
d2222=data.frame(family=rownames(d111),d222)
d3=data_all[data_all[,2]=="autumn",]
d33=d3[,2:3]
rownames(d33)=d3[,1]
d333=d33[rownames(d111),]
d3333=data.frame(family=rownames(d111),d333)
d4=data_all[data_all[,2]=="winter",]
d44=d4[,2:3]
rownames(d44)=d4[,1]
d444=d44[rownames(d111),]
d4444=data.frame(family=rownames(d111),d444)

#data_all=data.frame(
#                    family=rep(d1111$family,4),
#                    variable=factor(
#                                   c(
#                                      as.character(d1111$variable),
#                                      as.character(d2222$variable),
#                                      as.character(d3333$variable),
#                                      as.character(d4444$variable)
#                                      )
#                                   ),
#                    value=c(d1111$value,d2222$value,d3333$value,d4444$value)
#                    )


data_all=rbind(d1111,d2222,d3333,d4444)
p = ggplot(data_all, aes(x=variable, y = value, fill = family )) + 
  geom_bar(stat = "identity",position="fill", width=0.7)+ 
  scale_y_continuous(labels = scales::percent) + 
  xlab("Groups")+ylab("Percentage (%)")+main_theme+ theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
p


Family=factor(data_all$family,level=rownames(d111))
#Variable=factor(as.character(data_all$variable))#,level=c("spring","summer","autumn","winter")
#ff=data_all$variable
#levels(ff)=c("spring","summer","autumn","winter")

colourCount = length(unique(mtcars$hp))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))

col1 = rgb(250/255,60/255,60/255)
col2 = rgb(0/255,220/255,0/255)
col3 = rgb(30/255,60/255,255/255)
col4 = rgb(0/255,200/255,200/255)
col5 = rgb(240/255,0/255,130/255)
col6 = rgb(230/255,220/255,50/255)
col7 = rgb(240/255,130/255,40/255)
col8 = rgb(160/255,0/255,200/255)
col9 = rgb(160/255,230/255,50/255)
col10 = rgb(0/255,160/255,255/255)
col11 = rgb(230/255,175/255,45/255)
col12 = rgb(0/255,210/255,140/255)
col13 = rgb(247/255,153/255,209/255)
col14 = rgb(255/255,192/255,203/255)
col15 = rgb(219/255,112/255,147/255)

color <- c(col1,col2,col4,col6,col5,col3,col9,col7,col8,col10,col12,col11,col13,col14,col15)
data_all$family <- factor(data_all$family, levels=c("Actinidiaceae","Smilacaceae","Rosaceae","others","Poaceae","Polygonaceae","Urticaceae","Rubiaceae","Balsaminaceae","Sabiaceae","Amaryllidaceae","Grossulariaceae","Adoxaceae","Loranthaceae","Asteraceae"))
data_all$variable  = factor(data_all$variable, levels=c("spring","summer","autumn","winter"))

p = ggplot(data = data_all, aes(x = data_all$variable, y = value,alluvium = family)) +
  geom_alluvium(aes(fill = Family, colour = Family), alpha = .7,size=0) +
  main_theme + theme(axis.text.x = element_text( hjust = 0.5)) +
  ylab("Relative abundance (%)")+xlab("Season")+
  theme(axis.title=element_text(face="bold",size="10")) +
  ggtitle("Family changes among seasons")+
  scale_fill_manual(values =color)
p

